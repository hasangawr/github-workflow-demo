name: CI/CD Pipeline Demo

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "18"
  APP_NAME: "github-workflow-demo"

jobs:
  # BUILD STAGE
  build:
    name: 🔨 Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Clear npm cache
        run: npm cache clean --force

      - name: Install dependencies
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ""

      - name: Run build
        run: npm run build

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ./*
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-

  # TEST STAGE
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          registry-url: "https://registry.npmjs.org"

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ./*
          key: ${{ runner.os }}-build-${{ github.sha }}

      - name: Install dependencies (if cache miss)
        run: npm ci
        env:
          NODE_AUTH_TOKEN: ""

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Jest Tests
          path: "test-results.xml"
          reporter: jest-junit
          fail-on-error: true

  # SECURITY SCAN
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: npm audit --audit-level=high
        continue-on-error: true

  # DEPLOY STAGE
  deploy:
    name: 🚀 Deploy to EC2
    runs-on: ubuntu-latest
    needs: [build, test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: "https://registry.npmjs.org"

      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r . deploy/
          cd deploy
          npm ci --production
          tar -czf ../app.tar.gz .
        env:
          NODE_AUTH_TOKEN: ""

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.DEMO_EC2_HOST }}
          EC2_USER: ${{ secrets.DEMO_EC2_USER }}
          EC2_KEY: ${{ secrets.DEMO_EC2_PRIVATE_KEY }}
          APP_DIR: /home/ec2-user/github-workflow-demo
        run: |
          # Install SSH key
          mkdir -p ~/.ssh
          echo "$EC2_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H $EC2_HOST >> ~/.ssh/known_hosts

          # Copy application to EC2
          scp -i ~/.ssh/id_rsa app.tar.gz $EC2_USER@$EC2_HOST:/tmp/

          # Deploy on EC2
          ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST << 'EOF'
            # Create app directory if it doesn't exist
            sudo mkdir -p /home/ec2-user/github-workflow-demo
            sudo chown ec2-user:ec2-user /home/ec2-user/github-workflow-demo
            
            # Stop existing application
            sudo pkill -f "node app.js" || true
            
            # Backup current version
            if [ -d "/home/ec2-user/github-workflow-demo" ]; then
              sudo mv /home/ec2-user/github-workflow-demo /home/ec2-user/github-workflow-demo.backup.$(date +%Y%m%d_%H%M%S)
            fi
            
            # Extract new version
            mkdir -p /home/ec2-user/github-workflow-demo
            cd /home/ec2-user/github-workflow-demo
            tar -xzf /tmp/app.tar.gz
            
            # Install PM2 if not exists
            which pm2 || sudo npm install -g pm2
            
            # Start application with PM2
            NODE_ENV=production PORT=3000 pm2 start app.js --name "github-workflow-demo" --update-env
            pm2 save
            pm2 startup systemd -u ec2-user --hp /home/ec2-user
            
            # Clean up
            rm /tmp/app.tar.gz
          EOF

      - name: Health Check
        env:
          EC2_HOST: ${{ secrets.DEMO_EC2_HOST }}
        run: |
          # Wait a moment for the app to start
          sleep 10

          # Check if the application is responding
          curl -f http://$EC2_HOST:3000/health || exit 1
          echo "✅ Application deployed successfully!"

      - name: Notify deployment
        if: success()
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Application URL: http://${{ secrets.DEMO_EC2_HOST }}:3000"

      - name: Rollback on failure
        if: failure()
        env:
          EC2_HOST: ${{ secrets.DEMO_EC2_HOST }}
          EC2_USER: ${{ secrets.DEMO_EC2_USER }}
          EC2_KEY: ${{ secrets.DEMO_EC2_PRIVATE_KEY }}
        run: |
          echo "❌ Deployment failed, attempting rollback..."
          # Rollback logic would go here
          # For demo purposes, we'll just log the failure
          echo "Manual intervention required for rollback"
